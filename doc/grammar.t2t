mud语法
dworld v0.2 
%%date(%Y-%m-%d)

%!target  :html
%!options : --encoding utf-8

+ 介绍 +
++ 简介 ++

一个简单的解释型计算机语言，特性如下：
- 字符集，ASCII。
- byte、int、double、bool和string类型。
- 算术运算、位操作、关系运算、逻辑运算
- if、for结构。
- 函数（内建和自定义）。


++ 基本类型 ++ 

+ byte

无符号整数，占用一个字节。

+ int

有符号整数，对应机器字长。

+ double

双精度浮点数。

+ bool

逻辑变量，值为true或false。

+ string

字符串，引用类型。


++ 基本构造 ++

+ 表达式

支持以下操作符
```
()      函数调用
++      自增
--      自减

&       位与
|       位或
~       位非
<<      左移
>>      右移

&&      逻辑与
||      逻辑或
！      逻辑非

>       大于
>=      大于等于
==      等于
!=      不等于
<=      小于等于
<       小于

*       乘法
/       除法
%       余数
+       加法
-       减法
+       符号不变，前缀操作符
-       求负，前缀操作符

=       赋值

```
这些操作符的优先级如下
```
0       () 
1       ++ --
2       ! ~ -(prefix) +(prefix)
3       * / %
4       + -
5       << >>
6       > >= <= < 
7       == !=
8       &
9       |
10      &&
11      ||
12      =
```

+ 变量
```
var <变量名> {, <变量名>} <类型>;
```

+ if语句
```
if  <条件>
    <语句>

或

if  <条件>
    <语句>
else
    <语句>

```
<条件>必须为bool类型

+ for语句
```
for <条件>
    <语句>
```
<条件>必须为bool类型

+ return
```
return <返回值>
```


++ 函数 ++

func <函数名> (参数列表) <返回值>

++  常量 ++  

+ bool

```
true|false
```

+ byte

```
NormalChar      = [^'"\\] 
EscChar         = ['"\\nt]
HexNum          = [0-9]|[a-f]|[A-F]
Char            = '{NormalChar}'         |
                  '\\{EscChar}'       |
                  '\\{HexNum}{HexNum}?'
```

+ int

```
{Number}      = [0-9]*
{Interger}    = [+-] [1-9]{Number}
```

+ string

```
"{Char*}"
```

+ double

```
Double          = {Interger}\.{Number}[Ee]{Interger}
``` 


++ 内建函数 ++
```
print(string str, ...)
```

++ 关键字 ++
```
var     变量定义
func    函数定义
bool    布尔类型
byte    字节类型
int     整形
double  浮点型
string  字符串
if      条件语句
else    条件分支
for     循环
return  函数返回
true    逻辑真
false   逻辑假
```

+ 词法 +
```

NormalChar      = [^'"\\] 
EscChar         = ['"\\nt]
HexNum          = [0-9]|[a-f]|[A-F]
Char            = '{NormalChar}'         |
                  '\\{EscChar}'       |
                  '\\{HexNum}{HexNum}?'
String          = "{Char}*"
Number          = [0-9]*
Interger        = [+-] [1-9]{Number}
Double          = {Interger}\.{Number}[Ee]{Interger}
Identity        = [a-zA-Z_][a-zA-Z_0-9]*
```

+ 语法 +

```
Program     = VarDef
              FuncDef
              
VarDef      = 'var' IdentList ( Type [ "=" ExprList] | "=" ExprList ) ';'
IdentList   = Identity {',' Identity}
Type        = ( 'byte' | 'int' | 'double' | 'bool' | 'string')
ExprList    = Expr {',' Expr}

Expr        = OrExpr                        |
              Identity '=' AssginExpr
              
OrExpr      = AndExpr                       |
              AndExpr '||' AndExpr
              
AndExpr     = BitOrExpr                     |
              BitOrExpr '&&' BitOrExpr
              
BitOrExpr   = BitAndExpr                    |
              BitAndExpr '|' BitAndExpr
              
BitAndExpr  = EqualExpr                     |
              EqualExpr '&' EqualExpr
              
EqualExpr   = RationExpr                    |
              RationExpr '==' RationExpr    |
              RationExpr '!=' RationExpr
              
RationExpr  = ShiftExpr                     |
              ShiftExpr '>=' ShiftExpr      |
              ShiftExpr '<=' ShiftExpr      |
              ShiftExpr '>' ShiftExpr       |
              ShiftExpr '<' ShiftExpr
              
ShiftExpr   = AddExpr                       |
              AddExpr '<<' AddExpr          |
              AddExpr '>>' AddExpr
              
AddExpr     = MultiExpr                     |
              MultiExpr '+' MultiExpr       |
              MultiExpr '-' MultiExpr
              
MultiExpr   = PreExpr                       |
              PreExpr '*' PreExpr           |
              PreExpr '/' PreExpr           |
              PreExpr '%' PreExpr
              
PreExpr     = PostExpr                      |
              '!'PostExpr                   |
              '~'PostExpr                   |
              '+'PostExpr                   |
              '-'PostExpr
              
PostExpr    = FuncExpr                      |
              FuncExpr'++'                  |
              FuncExpr'--'
              
FuncExpr    = PrimaryExpr                   |
              Identity Params
              
Params      = '(' ')' | '(' ExprList ')'

PrimaryExpr = Bool                          |
              Byte                          |
              Integer                       |
              Double                        |
              String                        |
              Identity                      |
              '('Expr')'

FuncDef     = 'func' Identity ParamsDef Type FuncBody
ParamsDef   = '(' ')' | '(' '...' ')' | '(' ParamDef ')'
ParamDef    = Identity Type {',' Identity Type } [ ',''...']

FuncBody    = Composed
Composed    = '{' Statements '}'
Statements  = { Statement }
Statement   = VarDef                        |
              Expr ';'                      |
              Composed                      |
              IfState                       |
              ForState                      |
              RetState

IfState     = 'if' Expr Composed [ 'else' Composed ]
ForState    = 'for' Expr Composed
RetState    = 'return' Expr ';'
```